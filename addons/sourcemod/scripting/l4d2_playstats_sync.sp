#pragma semicolon 1
#pragma newdecls required

#include <ripext>
#include <regex>
#include <sourcemod>
#include <left4dhooks>
#include <readyup>

public Plugin myinfo =
{
    name        = "L4D2 - Player Statistics Sync",
    author      = "Altair Sossai",
    description = "Sends the information generated by plugin l4d2_playstats.smx to the API of l4d2_playstats",
    version     = "1.0.0",
    url         = "https://github.com/altair-sossai/l4d2-zone-server"
};

ConVar
    hEndPoint,
    hAccessToken,
    hWebSiteUrl;

bool rankingDisplayed[MAXPLAYERS + 1] = { false, ... };

public void OnPluginStart()
{
    hEndPoint = CreateConVar("playstats_endpoint", "", "Play Stats endpoint", FCVAR_PROTECTED);
    hAccessToken = CreateConVar("playstats_access_token", "", "Play Stats Access Token", FCVAR_PROTECTED);
    hWebSiteUrl = CreateConVar("playstats_web_url", "", "Play Stats web URL", FCVAR_PROTECTED);

    RegConsoleCmd("sm_ranking", ShowRankingCmd);

    HookEvent("round_start", RoundStart_Event, EventHookMode_PostNoCopy);

    CreateTimer(200.0, DisplayStatsUrlTick, _, TIMER_REPEAT);
}

public void OnRoundIsLive()
{
    ResetRankingDisplayed();
}

public void OnClientPutInServer(int client)
{
    rankingDisplayed[client] = false;

    CreateTimer(60.0, ShowRankingTick, client);
}

Action ShowRankingCmd(int client, int args)
{
    ShowRanking(client);
    return Plugin_Handled;
}

void RoundStart_Event(Event hEvent, const char[] eName, bool dontBroadcast)
{
    Sync();
}

Action DisplayStatsUrlTick(Handle timer)
{
    if (!IsInReady() || GameInProgress())
        return Plugin_Continue;

    PrintToChatAll("\x03l4d2.com.br");
    PrintToChatAll("\x04!ranking \x01to check your position");

    return Plugin_Continue;
}

Action ShowRankingTick(Handle timer, int client)
{
    if (rankingDisplayed[client] || !IsInReady() || GameInProgress())
        return Plugin_Continue;

    ShowRanking(client);

    return Plugin_Handled;
}

void Sync()
{
    char logsPath[128] = "logs/";
    BuildPath(Path_SM, logsPath, PLATFORM_MAX_PATH, logsPath);

    Regex regex = new Regex("^\\w{4}-\\w{2}-\\w{2}_\\w{2}-\\w{2}_\\d{4}.*\\.txt$");
    DirectoryListing directoryListing = OpenDirectory(logsPath);

    char fileName[128];
    while (directoryListing.GetNext(fileName, sizeof(fileName))) 
    {
        if (!regex.Match(fileName))
            continue;

        SyncFile(fileName);
    }
}

void SyncFile(char[] fileName)
{
    char filePath[128];
    FormatEx(filePath, sizeof(filePath), "%s%s", "logs/", fileName);
    BuildPath(Path_SM, filePath, PLATFORM_MAX_PATH, filePath);

    File file = OpenFile(filePath, "r");
    if (!file)
        return;

    char content[40000];
    file.ReadString(content, sizeof(content), -1);

    JSONObject command = new JSONObject();

    command.SetString("fileName", fileName);
    command.SetString("content", content);

    HTTPRequest request = BuildHTTPRequest("/api/statistics");
    request.Post(command, SyncFileResponse);
}

void SyncFileResponse(HTTPResponse httpResponse, any value)
{
    if (httpResponse.Status != HTTPStatus_OK)
        return;

    ClearCache();

    JSONObject response = view_as<JSONObject>(httpResponse.Data);

    bool mustBeDeleted = response.GetBool("mustBeDeleted");
    if (!mustBeDeleted)
        return;

    char fileName[128];
    response.GetString("fileName", fileName, sizeof(fileName));

    char filePath[128];
    FormatEx(filePath, sizeof(filePath), "%s%s", "logs/", fileName);
    BuildPath(Path_SM, filePath, PLATFORM_MAX_PATH, filePath);

    DeleteFile(filePath);
}

void ClearCache()
{
    char webSiteUrl[100];
    GetConVarString(hWebSiteUrl, webSiteUrl, sizeof(webSiteUrl));

    char endpoint[128];
    FormatEx(endpoint, sizeof(endpoint), "%s/api/cache/clear", webSiteUrl);

    HTTPRequest request = new HTTPRequest(endpoint);
    JSONObject command = new JSONObject();

    request.Post(command, ClearCacheResponse);
}

void ClearCacheResponse(HTTPResponse httpResponse, any value)
{
}

void ShowRanking(int client)
{
    rankingDisplayed[client] = true;

    char webSiteUrl[100];
    GetConVarString(hWebSiteUrl, webSiteUrl, sizeof(webSiteUrl));

    char path[128];
    FormatEx(path, sizeof(path), "%s/ranking", webSiteUrl);

    ShowMOTDPanel(client, "L4D2 | Players Ranking", path, MOTDPANEL_TYPE_URL);
}





bool GameInProgress()
{
    int teamAScore = L4D2Direct_GetVSCampaignScore(0);
    int teamBScore = L4D2Direct_GetVSCampaignScore(1);
    
    return teamAScore != 0 || teamBScore != 0;
}

void ResetRankingDisplayed()
{
    for (int i = 0; i <= MaxClients; i++)
        rankingDisplayed[i] = false;
}

HTTPRequest BuildHTTPRequest(char[] path)
{
    char endpoint[255];
    GetConVarString(hEndPoint, endpoint, sizeof(endpoint));
    StrCat(endpoint, sizeof(endpoint), path);

    char accessToken[100];
    GetConVarString(hAccessToken, accessToken, sizeof(accessToken));

    HTTPRequest request = new HTTPRequest(endpoint);
    request.SetHeader("Authorization", accessToken);

    return request;
}