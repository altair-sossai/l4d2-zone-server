#pragma semicolon 1
#pragma newdecls required

#include <ripext>
#include <regex>
#include <sourcemod>
#include <left4dhooks>
#include <readyup>

public Plugin myinfo =
{
    name        = "L4D2 - Player Statistics Sync",
    author      = "Altair Sossai",
    description = "Sends the information generated by plugin l4d2_playstats.smx to the API of l4d2_playstats",
    version     = "1.0.0",
    url         = "https://github.com/altair-sossai/l4d2-zone-server"
};

ConVar
    hUrl,
    hAccessToken;

public void OnPluginStart()
{
    hUrl = CreateConVar("playstats_url", "", "Play stats API URL", FCVAR_PROTECTED);
    hAccessToken = CreateConVar("playstats_access_token", "", "Play Stats Access Token", FCVAR_PROTECTED);

    HookEvent("round_start", RoundStart_Event, EventHookMode_PostNoCopy);
}

void RoundStart_Event(Event hEvent, const char[] eName, bool dontBroadcast)
{
    CreateTimer(10.0, RoundStart_Tick);
}

Action RoundStart_Tick(Handle timer)
{
    Sync();

    return Plugin_Stop;
}

void Sync()
{
    char logsPath[128] = "logs/";
    BuildPath(Path_SM, logsPath, PLATFORM_MAX_PATH, logsPath);

    Regex regex = new Regex("^\\w{4}-\\w{2}-\\w{2}_\\w{2}-\\w{2}_\\d{4}.*\\.txt$");
    DirectoryListing directoryListing = OpenDirectory(logsPath);

    char fileName[128];
    while (directoryListing.GetNext(fileName, sizeof(fileName))) 
    {
        if (!regex.Match(fileName))
            continue;

        SyncFile(fileName);
    }
}

void SyncFile(char[] fileName)
{
    char filePath[128];
    FormatEx(filePath, sizeof(filePath), "%s%s", "logs/", fileName);
    BuildPath(Path_SM, filePath, PLATFORM_MAX_PATH, filePath);

    File file = OpenFile(filePath, "r");
    if (!file)
        return;

    char content[40000];
    file.ReadString(content, sizeof(content), -1);

    JSONObject command = new JSONObject();

    command.SetString("fileName", fileName);
    command.SetString("content", content);

    HTTPRequest request = BuildHTTPRequest("/api/statistics");
    request.Post(command, SyncFileResponse);
}

void SyncFileResponse(HTTPResponse httpResponse, any value)
{
    if (httpResponse.Status != HTTPStatus_OK)
        return;

    ClearRankingCache();

    JSONObject response = view_as<JSONObject>(httpResponse.Data);

    bool mustBeDeleted = response.GetBool("mustBeDeleted");
    if (!mustBeDeleted)
        return;

    char fileName[128];
    response.GetString("fileName", fileName, sizeof(fileName));

    char filePath[128];
    FormatEx(filePath, sizeof(filePath), "%s%s", "logs/", fileName);
    BuildPath(Path_SM, filePath, PLATFORM_MAX_PATH, filePath);

    DeleteFile(filePath);
}

void ClearRankingCache()
{
    char rankingUrl[100];
    GetConVarString(FindConVar("ranking_url"), rankingUrl, sizeof(rankingUrl));

    char endpoint[128];
    FormatEx(endpoint, sizeof(endpoint), "%s/api/cache/clear", rankingUrl);

    HTTPRequest request = new HTTPRequest(endpoint);
    JSONObject command = new JSONObject();

    request.Post(command, ClearRankingCacheResponse);
}

void ClearRankingCacheResponse(HTTPResponse httpResponse, any value)
{
}

HTTPRequest BuildHTTPRequest(char[] path)
{
    char url[255];
    GetConVarString(hUrl, url, sizeof(url));
    StrCat(url, sizeof(url), path);

    char accessToken[100];
    GetConVarString(hAccessToken, accessToken, sizeof(accessToken));

    HTTPRequest request = new HTTPRequest(url);
    request.SetHeader("Authorization", accessToken);

    return request;
}